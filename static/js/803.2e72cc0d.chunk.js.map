{"version":3,"file":"static/js/803.2e72cc0d.chunk.js","mappings":"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","sources":["components/Game/Game.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './Game.css';\n\nconst Game = () => {\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const [winningLine, setWinningLine] = useState([]);\n  const [playerXWins, setPlayerXWins] = useState(0);\n  const [playerOWins, setPlayerOWins] = useState(0);\n  const [playerXSymbol, setPlayerXSymbol] = useState('X');\n  const [playerOSymbol, setPlayerOSymbol] = useState('O');\n\n  const handleClick = index => {\n    if (winner || board[index]) return;\n\n    const newBoard = [...board];\n    newBoard[index] = xIsNext ? playerXSymbol : playerOSymbol;\n    setBoard(newBoard);\n    setXIsNext(!xIsNext);\n\n    calculateWinner(newBoard);\n  };\n\n  const calculateWinner = currentBoard => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        currentBoard[a] &&\n        currentBoard[a] === currentBoard[b] &&\n        currentBoard[a] === currentBoard[c]\n      ) {\n        setWinner(currentBoard[a]);\n        setWinningLine(lines[i]);\n        updateWins(currentBoard[a]);\n        return;\n      }\n    }\n\n    if (!currentBoard.includes(null)) {\n      setWinner('Draw');\n    }\n  };\n\n  const updateWins = winner => {\n    if (winner === playerXSymbol) {\n      setPlayerXWins(prevWins => prevWins + 1);\n    } else if (winner === playerOSymbol) {\n      setPlayerOWins(prevWins => prevWins + 1);\n    }\n  };\n\n  const renderSquare = index => {\n    const isWinningSquare = winningLine.includes(index);\n    return (\n      <button\n        className={`square ${isWinningSquare ? 'winning' : ''}`}\n        onClick={() => handleClick(index)}\n      >\n        {board[index]}\n      </button>\n    );\n  };\n\n  const resetGame = () => {\n    setBoard(Array(9).fill(null));\n    setXIsNext(true);\n    setWinner(null);\n    setWinningLine([]);\n  };\n\n  const handlePlayerXSymbolChange = event => {\n    setPlayerXSymbol(event.target.value);\n  };\n\n  const handlePlayerOSymbolChange = event => {\n    setPlayerOSymbol(event.target.value);\n  };\n\n  return (\n    <div className=\"tic-tac-toe\">\n      <div className=\"board\">\n        {board.map((square, index) => (\n          <div key={index} className=\"square-container\">\n            {renderSquare(index)}\n          </div>\n        ))}\n      </div>\n      <div className=\"status\">\n        {winner ? (\n          winner === 'Draw' ? (\n            <p>It's a Draw!</p>\n          ) : (\n            <p>{winner} Wins!</p>\n          )\n        ) : (\n          <p>Next Player: {xIsNext ? playerXSymbol : playerOSymbol}</p>\n        )}\n        <p>Player X Wins: {playerXWins}</p>\n        <p>Player O Wins: {playerOWins}</p>\n        <div className=\"symbol-selection\">\n          <label htmlFor=\"playerXSymbol\">Player X Symbol:</label>\n          <input\n            type=\"text\"\n            id=\"playerXSymbol\"\n            value={playerXSymbol}\n            onChange={handlePlayerXSymbolChange}\n          />\n          <label htmlFor=\"playerOSymbol\">Player O Symbol:</label>\n          <input\n            type=\"text\"\n            id=\"playerOSymbol\"\n            value={playerOSymbol}\n            onChange={handlePlayerOSymbolChange}\n          />\n        </div>\n        <button onClick={resetGame}>Reset Game</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n"],"names":["Game","board","setBoard","useState","Array","fill","xIsNext","setXIsNext","winner","setWinner","winningLine","setWinningLine","playerXWins","setPlayerXWins","playerOWins","setPlayerOWins","playerXSymbol","setPlayerXSymbol","playerOSymbol","setPlayerOSymbol","calculateWinner","currentBoard","lines","i","length","a","b","c","updateWins","includes","prevWins","renderSquare","index","isWinningSquare","_jsx","className","concat","onClick","newBoard","handleClick","children","_jsxs","map","square","htmlFor","type","id","value","onChange","event","target","resetGame"],"sourceRoot":""}